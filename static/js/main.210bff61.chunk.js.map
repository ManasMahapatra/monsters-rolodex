{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","key","monster","id","className","src","concat","alt","name","email","CardList","monsters","map","card_component_Card","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","catch","rejectValue","console","log","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,eAAO,SAACC,GAAD,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,QAAQC,GAAIC,UAAU,kBACpCN,EAAAC,EAAAC,cAAA,OAAKK,IAAG,wBAAAC,OAA0BT,EAAMK,QAAQC,GAAK,EAA7C,0BAAwEI,IAAI,KACpFT,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,QAAQM,MACnBV,EAAAC,EAAAC,cAAA,SAAIH,EAAMK,QAAQO,UCFTC,EAAW,SAACb,GAAD,OACtBC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACZP,EAAMc,SAASC,IAAI,SAAAV,GAAO,OAAIJ,EAAAC,EAAAC,cAACa,EAAD,CAAMX,QAASA,QCJrCY,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OASvBnB,EAAAC,EAAAC,cAAA,SAAOI,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC+C/DG,qBApDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYFP,aAAe,SAACW,GAEdP,EAAKQ,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpCX,EAAKY,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IAJHT,mFAQM,IAAAa,EAAAV,KAClBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAClB,SAAS4B,MAASC,MAAM,SAAAC,GAAW,OAAIC,QAAQC,IAAI,8DAU3E,IAAAC,EAC2BpB,KAAKS,MAA/BtB,EADDiC,EACCjC,SAAUmB,EADXc,EACWd,YAIXe,EAAmBlC,EAASmC,OAAO,SAAA5C,GAAO,OAAIA,EAAQM,KAAKuC,cAAcC,SAASlB,EAAYiB,iBACpG,OAEEjD,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACZN,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAACiD,EAAD,CAAWjC,YAAY,kBAAkBC,aAAcO,KAAKP,eAG7DnB,EAAAC,EAAAC,cAACkD,EAAD,CAAUvC,SAAUkC,YApCVM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.210bff61.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nexport const Card = (props) => (\n  <div key={props.monster.id} className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id + 2}?set=set2&size=180x180`} alt=\"\"/>\n    <h3>{props.monster.name}</h3>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from 'react';\nimport './card-list.style.css';\nimport {Card} from '../card/card.component.jsx';\n\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => <Card monster={monster}/>)}\n  </div>\n);\n","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n  // {/* e rrturns an object while, e.target returns the html element triggering it, and e.Value\n  //   contains the current value attribute of the HTML element */}\n  //\n  // {/* setState is a async method, and hence when it executes we can't expect it to work it right away. If we want to do Something\n  // right after setting state , it needs to go inside a callback */}\n  //\n  // {/* Reach creates synthetic event, jjst like HTML events, but the original one if intercepted by ReactDOM engine, and looks up\n  //   into state */}\n  <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\n\n)\n","import React , {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\nimport './App.css';\n\n//Inheriting the properties of React.Component\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  //componentLifeCycle method\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users})).catch(rejectValue => console.log(\"Error fetching metadata\"))\n  }\n  handleChange = (e) => {\n    //arror functions stricts the usage to lexical scoping\n    this.setState({searchField:e.target.value});\n  }\n\n  //gets updated (rerendered) when state is updated\n  //You can't do this.state.name = \"Something\", as React is unidirectional, it is suposed to interact\n  //with the DOM itself. So when, setState is used, React interacts with the DOm, you cant.\n  render(){\n    const {monsters, searchField } = this.state;\n    //ARRAY METHOD -- FILTER()\n    //The filter method takes an array and iterates over it, and passes each item as an argument to the function provided\n    //the function must return a true or a False statement, depending on which they are filtered.\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n\n      <div className=\"App\">\n         <h1>Monster Rolodex</h1>\n        {/* the callback passed will be executed in here, not where it's called */}\n         <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\n\n        {/* Props are items that are passed at declaration, and children are items passed between tags */}\n        <CardList monsters={filteredMonsters} />\n        {/* <header className=\"App-header\">\n            {\n              //ARRAY METHOD -- MAP()\n              //The map method iterates through an array and return each item as an argument to\n              //function passed to the map method. See it like a for loop. Besides map doesnt change the original array\n              this.state.monsters.map(monster => <h3 key={monster.id}>{monster.name}</h3>)\n              //Why key(Unique ID): If an element has to be updated, React prefers not to re-rerend\n              //every element, and thats why, it needs an unique key to that certain element.\n            }\n        </header> */}\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}